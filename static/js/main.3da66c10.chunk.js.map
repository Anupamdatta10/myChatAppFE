{"version":3,"sources":["notification-sound.mp3","componant/Chat.js","config.js","App.js","reportWebVitals.js","index.js"],"names":["Chat","socket","username","room","useState","currentMessage","setCurrentMessage","messageList","setMessageList","file","setFile","fileType","setFileType","audioPlayer","useRef","handelFile","e","console","log","target","files","reader","FileReader","readAsDataURL","onload","result","onerror","error","getBase64","sendMessage","messageData","author","message","type","time","Date","now","getHours","getMinutes","name","emit","list","useEffect","on","data","current","play","className","map","messageContent","id","includes","src","fileName","download","href","value","placeholder","onChange","event","onKeyPress","key","onClick","ref","NotificationSound","config","io","connect","Config","base_url","App","setUsername","setRoom","showChat","setShowChat","room_user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3da66c10.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/notification-sound.3e0e8067.mp3\";","import React, { useEffect, useState ,useRef} from \"react\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\nimport NotificationSound from '../notification-sound.mp3'\r\nfunction Chat({ socket, username, room }) {\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n  const [messageList, setMessageList] = useState([]);\r\n  const [file, setFile] = useState(false);\r\n  const [fileType, setFileType] = useState(\"\");\r\n  const audioPlayer = useRef(null);\r\n  const handelFile = (e) => {\r\n    console.log(e.target.files[0])\r\n    getBase64(e.target.files[0])\r\n    setFileType(e.target.files[0])\r\n    setFile(true)\r\n  }\r\n  function playAudio() {\r\n    audioPlayer.current.play();\r\n  }\r\n\r\n  function getBase64(file) {\r\n    var reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = function () {\r\n      //console.log(reader.result);\r\n      setCurrentMessage(reader.result)\r\n    };\r\n    reader.onerror = function (error) {\r\n      console.log('Error: ', error);\r\n    };\r\n  }\r\n\r\n  const sendMessage = async () => {\r\n    if (currentMessage !== \"\") {\r\n      let messageData = {\r\n        room: room,\r\n        author: username,\r\n        message: currentMessage,\r\n        type: file ? fileType.type : 'text',\r\n        time:\r\n          new Date(Date.now()).getHours() +\r\n          \":\" +\r\n          new Date(Date.now()).getMinutes(),\r\n      };\r\n      if (file) {\r\n        messageData[\"fileName\"] = fileType.name\r\n      }\r\n      await socket.emit(\"send_message\", messageData);\r\n      setMessageList((list) => [...list, messageData]);\r\n      setCurrentMessage(\"\");\r\n      setFile(false);\r\n      setFileType(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.on(\"receive_message\", (data) => {\r\n      setMessageList((list) => [...list, data]);\r\n      playAudio()\r\n    });\r\n    socket.on(\"user_join\", (data) => {\r\n      setMessageList((list) => [...list, data]);\r\n    })\r\n  }, [socket]);\r\n\r\n  return (\r\n    <div className=\"chat-window\">\r\n      <div className=\"chat-header\">\r\n        <p>Live Chat</p>\r\n      </div>\r\n      <div className=\"chat-body\">\r\n        <ScrollToBottom className=\"message-container\">\r\n          {messageList.map((messageContent) => {\r\n            return (\r\n              <>{messageContent.author === \"system\" ? <div className=\"system-message\">{messageContent.message}</div> :\r\n                <div\r\n                  className=\"message\"\r\n                  id={username === messageContent.author ? \"you\" : \"other\"}\r\n                >\r\n                  <div>\r\n                    <div className=\"message-content\">{\r\n                      messageContent.type == 'text' ?\r\n                        <p>{messageContent.message}</p> : <>{messageContent.type.includes('image') ?\r\n                          <img className=\"img-message\" src={messageContent.message} />\r\n                          : <><p>{messageContent.fileName}</p><span className=\"download\"><a download={messageContent.fileName} href={messageContent.message}>&#8595;</a></span></>}</>\r\n\r\n                    }\r\n                    </div>\r\n                    <div className=\"message-meta\">\r\n                      <p id=\"time\">{messageContent.time}</p>\r\n                      <p id=\"author\">{messageContent.author}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>}\r\n              </>\r\n            );\r\n          })}\r\n        </ScrollToBottom>\r\n      </div>\r\n      <div className=\"chat-footer\">\r\n        <input\r\n          type=\"text\"\r\n          value={file ? fileType.name : currentMessage}\r\n          placeholder=\"Hey...\"\r\n          onChange={(event) => {\r\n            if (file) {\r\n              setCurrentMessage(currentMessage)\r\n            } else {\r\n              setCurrentMessage(event.target.value);\r\n            }\r\n          }}\r\n          onKeyPress={(event) => {\r\n            event.key === \"Enter\" && sendMessage();\r\n          }}\r\n        />\r\n        <button onClick={() => { sendMessage() }}>&#9658;</button>\r\n      </div>\r\n      <input type=\"file\" onChange={(e) => { handelFile(e) }} />\r\n        <audio ref={audioPlayer} src={NotificationSound} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","let config=({\r\n    \"base_url\":\"https://anupamchatapp.onrender.com\"\r\n})\r\n\r\nexport default config;","import \"./App.css\";\r\nimport io from \"socket.io-client\";\r\nimport { useState } from \"react\";\r\nimport Chat from \"./componant/Chat\";\r\nimport Config  from './config'\r\n\r\nconst socket = io.connect(Config.base_url);\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [room, setRoom] = useState(\"\");\r\n  const [showChat, setShowChat] = useState(false);\r\n\r\n  const joinRoom = () => {\r\n    if (username !== \"\" && room !== \"\") {\r\n      let room_user={}\r\n      room_user[\"user\"]=username\r\n      room_user[\"room\"]=room\r\n      socket.emit(\"join_room\", room_user);\r\n      setShowChat(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!showChat ? (\r\n        <div className=\"joinChatContainer\">\r\n          <h3>Join A Chat</h3>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Your name...\"\r\n            onChange={(event) => {\r\n              setUsername(event.target.value);\r\n            }}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Room ID...\"\r\n            onChange={(event) => {\r\n              setRoom(event.target.value);\r\n            }}\r\n          />\r\n          <button onClick={joinRoom}>Join A Room</button>\r\n        </div>\r\n      ) : (\r\n        <Chat socket={socket} username={username} room={room} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}